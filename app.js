document.addEventListener('DOMContentLoaded', () => {

    let jsonData = []; // Veriyi, PDF olu≈üturma gibi diƒüer fonksiyonlarƒ±n eri≈üebilmesi i√ßin saklƒ±yoruz.

    // ====================================================================
    // YARDIMCI FONKSƒ∞YON: Ham veriyi, web sayfasƒ±nda g√∂sterilecek formata √ßevirir.
    // ====================================================================
    function getWebContent(header, cellValue) {
        if (!cellValue || typeof cellValue !== 'string' || !cellValue.endsWith('.png')) {
            return cellValue;
        }
        const directions = ["K", "KDK", "KD", "DKD", "D", "DGD", "GD", "GGD", "G", "GGB", "GB", "BGB", "B", "BKB", "KB", "KKB", "K"];
        if (header.includes('Yonu')) {
            const match = cellValue.match(/(\d+)/);
            if (match) {
                const angle = parseFloat(match[0]);
                const index = Math.floor((angle + 11.25) / 22.5);
                return directions[index];
            }
        }
        if (header.includes('Hava Durumu')) {
            if (cellValue.includes('acik')) return '‚òÄÔ∏è';
            if (cellValue.includes('bulutlu')) return '‚òÅÔ∏è';
            if (cellValue.includes('yagmurlu')) return 'üåßÔ∏è';
        }
        return '';
    }

    // ====================================================================
    // ANA ƒ∞≈ûLEM: veriler.json'dan verileri √ßekip HTML tablosunu olu≈üturur.
    // ====================================================================
    fetch('veriler.json')
        .then(response => {
            if (!response.ok) { throw new Error('Network response was not ok'); }
            return response.json();
        })
        .then(data => {
            jsonData = data; // Veriyi global deƒüi≈ükene ata
            const tableBody = document.getElementById('table-body');
            const tableHeadersContainer = document.getElementById('table-headers');
            if (!data || data.length === 0) return;

            const headers = Object.keys(data[0]);
            const headerRow = document.createElement('tr');
            headers.forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText;
                headerRow.appendChild(th);
            });
            tableHeadersContainer.appendChild(headerRow);

            data.forEach(kayit => {
                const row = document.createElement('tr');
                headers.forEach(header => {
                    const cell = document.createElement('td');
                    cell.textContent = getWebContent(header, kayit[header]);
                    row.appendChild(cell);
                });
                tableBody.appendChild(row);
            });
        })
        .catch(error => console.error('Tablo olu≈üturulurken hata olu≈ütu:', error));

    // ====================================================================
    // BUTON ƒ∞≈ûLEVLERƒ∞
    // ====================================================================
    const shareButton = document.getElementById('shareButton');
    const downloadPdfButton = document.getElementById('downloadPdfButton');

    // 1. Payla≈ü Butonu
    if (shareButton) { /* ... Kopyalama Kodu ... */ }

    // 2. PDF ƒ∞ndirme Butonu (T√úRK√áE KARAKTER D√úZELTMESƒ∞ ƒ∞LE)
    if (downloadPdfButton) {
        downloadPdfButton.addEventListener('click', () => {
            if (jsonData.length === 0) {
                alert("Veri hen√ºz y√ºklenmedi, l√ºtfen bir saniye bekleyip tekrar deneyin.");
                return;
            }

            const doc = new jspdf.jsPDF({ orientation: 'landscape' });
            const tableHeaders = Object.keys(jsonData[0]);

            // SADECE PDF ƒ∞√áƒ∞N veriyi yeniden i≈üle ve T√ºrk√ße karakterleri deƒüi≈ütir
            const tableRows = jsonData.map(row => {
                return tableHeaders.map(header => {
                    let cellText = getWebContent(header, row[header]);

                    // PDF'in anlayabileceƒüi karakterlere d√∂n√º≈üt√ºr
                    if (typeof cellText === 'string') {
                        cellText = cellText
                            .replace(/√á/g, 'C').replace(/√ß/g, 'c')
                            .replace(/ƒû/g, 'G').replace(/ƒü/g, 'g')
                            .replace(/ƒ∞/g, 'I').replace(/ƒ±/g, 'i')
                            .replace(/√ñ/g, 'O').replace(/√∂/g, 'o')
                            .replace(/≈û/g, 'S').replace(/≈ü/g, 's')
                            .replace(/√ú/g, 'U').replace(/√º/g, 'u')
                            .replace(/‚òÄÔ∏è/g, 'Acik').replace(/‚òÅÔ∏è/g, 'Bulutlu').replace(/üåßÔ∏è/g, 'Yagmurlu'); // Emojileri de metne √ßevir
                    }
                    return cellText;
                });
            });

            doc.autoTable({
                head: [tableHeaders],
                body: tableRows,
                styles: { fontSize: 7, cellPadding: 2 },
                headStyles: { fillColor: [39, 49, 171] },
                theme: 'grid'
            });

            doc.save('deniz-durum-tablosu.pdf');
        });
    }
});
